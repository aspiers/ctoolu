#! /usr/bin/env ruby
require 'rubygems'
require 'dbus'
require 'gtk2'
require 'yaml'

HOME = ENV['HOME']

# actual url is constructed as url % pattern.match(text).captures
CtooluAction = Struct.new :label, :pattern, :url, :commands

class CtooluCommand < Struct.new :label, :command, :keep_output
  def execute(captures)
    # TODO honor keep_output
    substituted = command % captures
    if keep_output
      $clipboard.Set `#{substituted}`
    else
      run_in_background substituted
    end
  end

  private
  def run_in_background(command)
    child_pid = fork
    if child_pid
      # reap and ignore the return status, don't leave a zombie around
      Process.detach(child_pid)
    else
      exec command
    end
  end
end

def load_actions
  try_dirs = [
              ".",
              "#{HOME}/.local/share/ctoolu",
              "/usr/share/ctoolu",
             ]
  try_configs = try_dirs.map{|dir| File.join(dir, "actions.yaml")}
  found_config = try_configs.find do |config|
    File.exists? config
  end
  if found_config
    puts "Config used: #{found_config}"
  else
    fail "Config not found in #{try_configs.join ','}"
  end
  YAML.load_file found_config
end

$actions = load_actions

def clipboard_changed(text)
  # how to deal with multiple matches? warn but do only one
  $actions.each do |action|
    match_data = action.pattern.match(text)
    if match_data
      match_menu action, match_data.captures
    end
  end
end

def url_copy(url)
  $clipboard.Set url
end

# http://ruby-gnome2.sourceforge.jp/hiki.cgi?Gtk%3A%3AMenu
def match_menu(action, captures)
  menu = Gtk::Menu.new

  label_item = Gtk::MenuItem.new(action.label)
  label_item.signal_connect("activate") do
    action.url ||= "%s"
    url_copy(action.url % captures)
  end
  menu.append label_item

  menu.append Gtk::MenuItem.new(nil) # separator

  action.commands ||= []
  action.commands.each do |command|
    item = Gtk::MenuItem.new(command.label)
    item.signal_connect("activate") do
      command.execute captures
    end
    menu.append item
  end

  menu.show_all

  parent_shell = parent_item = nil
  mouse_button = 1
  activation_time = 0           # Time.now.to_i did not work
  menu.popup(parent_shell, parent_item, mouse_button, activation_time)
end

bus = DBus::SessionBus.instance

clipboard_relay_svc = bus["net.vidner.ClipboardRelay"]
clipboard = clipboard_relay_svc.object "/net/vidner/ClipboardRelay/Clipboard"
clipboard.introspect
# FIXME there is no ProxyObject#interfacce
# FIXME ProxyObjectInterface#on_signal does not mimic ProxyObject#on_signal
clipboard.default_iface = "net.vidner.ClipboardRelay"
clipboard.on_signal("Changed") { |text| clipboard_changed(text) }
$clipboard = clipboard

bus.glibize
Gtk.main
